@using System.Drawing
@using EInvoice.Web.Controllers.CategoryController
@using EInvoice.Web.Models
@using Unit = System.Web.UI.WebControls.Unit
@{
	var controller = ViewContext.Controller as ProductController;
}
@(Html.DevExpress().GridView<ProductViewModel>(settings =>
{
    settings.Name = "Products";
    settings.CallbackRouteValues = new { Controller = "Product", Action = "ProductPartial" };
    settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "Product", Action = "ProductPartialAddNew" };
    settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "Product", Action = "ProductPartialUpdate" };
    settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "Product", Action = "ProductPartialDelete" };
    settings.Styles.Header.BackColor = System.Drawing.ColorTranslator.FromHtml("#2A3F54");
    settings.Styles.Header.ForeColor = Color.White;
    settings.Styles.FocusedRow.BackColor = System.Drawing.ColorTranslator.FromHtml("#989898");
    settings.SettingsEditing.Mode = GridViewEditingMode.EditFormAndDisplayRow;
    settings.SettingsText.CommandBatchEditUpdate = "Update";
    settings.SettingsText.CommandBatchEditCancel = "Cancel";
    #region Toolbar Settings
    settings.Toolbars.Add(toolbarProduct =>
    {
        toolbarProduct.Enabled = true;
        toolbarProduct.ItemAlign = GridToolbarItemAlign.Right;
        toolbarProduct.Items.Add(c =>
        {

            c.SetTemplateContent(r =>
            {
                ViewContext.Writer.Write("<button type=\"button\" class=\"btn btn-default\"" +
                                         "data-toggle=\"modal\" id=\"btnNew\" data-target=\"#newProduct\">New</button>");

            });
        });

        //toolbarProduct.Items.Add(GridViewToolbarCommand.New);
        toolbarProduct.Items.Add(GridViewToolbarCommand.Edit);
        toolbarProduct.Items.Add(GridViewToolbarCommand.Delete);
        toolbarProduct.Items.Add(GridViewToolbarCommand.Refresh, true);
        toolbarProduct.Items.Add(i =>
        {
            i.Text = "Export to";
            i.Image.IconID = DevExpress.Web.ASPxThemes.IconID.ActionsDownload16x16office2013;
            i.BeginGroup = true;
            i.Items.Add(GridViewToolbarCommand.ExportToPdf);
            i.Items.Add(GridViewToolbarCommand.ExportToXls);
            i.Items.Add(GridViewToolbarCommand.ExportToXlsx);
        });
        toolbarProduct.Items.Add(i =>
        {
            i.BeginGroup = true;
            i.SetTemplateContent(c =>
            {
                Html.DevExpress().ButtonEdit(s =>
                {
                    s.Name = "search";
                    s.Properties.NullText = "Search...";
                    s.Properties.Buttons
                        .Add()
                        .Image.IconID = DevExpress.Web.ASPxThemes.IconID.FindFind16x16gray;
                }).Render();
            });
        });
    });
    #endregion Toolbar Settings
    #region Add Comlumns

    settings.Columns.Add(c =>
    {
        c.FieldName = "Code";
        c.Caption = "Product Code";
        c.Width = 150;
    });

    settings.Columns.Add(c =>
    {
        c.FieldName = "Name";

    });

    settings.Columns.Add(c =>
    {
        c.FieldName = "Price";
        c.CellStyle.HorizontalAlign = HorizontalAlign.Right;
        c.HeaderStyle.HorizontalAlign = HorizontalAlign.Right;
        c.EditorProperties().SpinEdit(p =>
        {
            p.DisplayFormatString = "#,# VND";
            p.DisplayFormatInEditMode = true;
        });
    });


    settings.Columns.Add(c =>
    {
        c.FieldName = "UnitID";
        c.Caption = "Unit";
        c.EditorProperties().ComboBox(p =>
        {
            p.TextField = "Name";
            p.ValueField = "ID";
            p.ValueType = typeof(int);
            p.BindList(controller.GetAllUnit());
        });
    });
    #endregion
    #region Numbering

    settings.Init = (sender, e) =>
    {
        var c = new GridViewDataColumn() { FieldName = "Series" };
        c.UnboundType = DevExpress.Data.UnboundColumnType.Integer;
        c.VisibleIndex = 0;
        c.Width = 50;
        c.CellStyle.HorizontalAlign = HorizontalAlign.Center;
        c.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;

        ((MVCxGridView)sender).Columns.Add(c);
    };

    settings.CustomColumnDisplayText = (sender, e) =>
    {
        if (e.Column.FieldName == "Series")
        {
            e.DisplayText = (e.VisibleRowIndex + 1).ToString();
        }
    };
    #endregion
    settings.KeyFieldName = "ID";
    settings.EditFormLayoutProperties.ColCount = 2;
    settings.EditFormLayoutProperties.Items.Add(i => i.Code);
    settings.EditFormLayoutProperties.Items.Add(i => i.Name);
    settings.EditFormLayoutProperties.Items.Add(i => i.Price);
    settings.EditFormLayoutProperties.Items.Add(i => i.UnitID);
    settings.EditFormLayoutProperties.Items.AddCommandItem(i =>
    {
        i.ColSpan = 2;
        i.HorizontalAlign = FormLayoutHorizontalAlign.Right;
    });

    settings.SettingsSearchPanel.CustomEditorName = "search";
    settings.SettingsBehavior.AllowFocusedRow = true;
    settings.SettingsExport.EnableClientSideExportAPI = true;
    settings.SettingsExport.ExcelExportMode = DevExpress.Export.ExportType.WYSIWYG;
    settings.Width = Unit.Percentage(100);

    settings.SettingsPager.PageSize = 13;

}).Bind(Model).SetEditErrorText(ViewBag.EditError).GetHtml())