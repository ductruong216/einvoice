@using System.Drawing
@using EInvoice.Web.Controllers.InvoiceController
@using EInvoice.Web.Models
@using Unit = System.Web.UI.WebControls.Unit

@model System.Collections.Generic.List<EInvoice.Web.Models.InvoiceViewModel>
@{
	var controller = ViewContext.Controller as InvoiceController;
}

@(Html.DevExpress().GridView<InvoiceViewModel>(settings =>
{
    settings.Name = "ReleaseGrid";
    settings.KeyFieldName = "ID";
    settings.CallbackRouteValues = new { Controller = "Invoice", Action = "Issue" };
    settings.Width = Unit.Percentage(100);
    settings.Styles.Header.BackColor = ColorTranslator.FromHtml("#2A3F54");
    settings.Styles.Header.ForeColor = Color.White;
    settings.SettingsLoadingPanel.Mode = GridViewLoadingPanelMode.Disabled;
    settings.SettingsSearchPanel.Visible = true;
    settings.SettingsText.SearchPanelEditorNullText = "Enter to search invoice";
    #region Numbering

    settings.Init = (sender, e) =>
    {
        var c = new GridViewDataColumn() { FieldName = "Pos." };
        c.UnboundType = DevExpress.Data.UnboundColumnType.Integer;
        c.VisibleIndex = 0;
        c.Width = 50;
        c.CellStyle.HorizontalAlign = HorizontalAlign.Center;
        c.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
        ((MVCxGridView)sender).Columns.Add(c);
    };


    settings.CustomColumnDisplayText = (sender, e) =>
    {
        if (e.Column.FieldName == "Pos.")
        {
            e.DisplayText = (e.VisibleRowIndex + 1).ToString();
        }
    };
    #endregion

    settings.Columns.Add(c =>
    {
        c.FieldName = "PatternId";
        c.Caption = "Pattern";
        c.CellStyle.HorizontalAlign = HorizontalAlign.Left;
        c.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
        c.EditorProperties().ComboBox(p =>
        {
            p.TextField = "Name";
            p.ValueField = "ID";
            p.ValueType = typeof(int);
            p.BindList(controller.GetPattern());
        });
        c.Width = 160;
    });

    settings.Columns.Add(c =>
    {
        c.FieldName = "SeriesId";
        c.Caption = "Serial";
        c.CellStyle.HorizontalAlign = HorizontalAlign.Left;
        c.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
        c.EditorProperties().ComboBox(p =>
        {

            p.TextField = "Name";
            p.ValueField = "ID";
            p.ValueType = typeof(int);
            p.BindList(controller.GetAllSerial());

        });
        c.Width = 160;});

    settings.Columns.Add(c =>
    {
        c.FieldName = "No";
        c.Caption = "No";
        c.CellStyle.HorizontalAlign = HorizontalAlign.Right;
        c.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
        c.PropertiesEdit.DisplayFormatString = "{0:0000000}";
        c.Width = 120;
    });
    settings.Columns.Add(c =>
    {
        c.FieldName = "CustomerCode";
        c.Width = 100;
    });
    settings.Columns.Add(c =>
    {
        c.FieldName = "CreatedDate";
        c.CellStyle.HorizontalAlign = HorizontalAlign.Right;
        c.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
        c.PropertiesEdit.DisplayFormatString = "dd/MM/yyyy";
    });
    settings.Columns.Add(c =>
    {
        c.FieldName = "ReleaseDate";
        c.CellStyle.HorizontalAlign = HorizontalAlign.Right;
        c.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
        c.PropertiesEdit.DisplayFormatString = "dd/MM/yyyy";

    });
    settings.Columns.Add(c =>
    {
        c.FieldName = "Tax";

        c.EditorProperties().TextBox(p =>
        {
            p.DisplayFormatString = "{0}%";
        });
        c.CellStyle.HorizontalAlign = HorizontalAlign.Right;
        c.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
    });
    settings.Columns.Add(c =>
    {
        c.FieldName = "GrandTotalAmount";
        c.PropertiesEdit.DisplayFormatString = "#,# VND";
        c.CellStyle.HorizontalAlign = HorizontalAlign.Right;
        c.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;

    });
    settings.Columns.Add(c =>
    {
        c.Caption = "Action";
        c.EditorProperties().TextBox(p =>
        {
            p.CssPostfix = "actions";
        });
      
        c.CellStyle.HorizontalAlign = HorizontalAlign.Center;
        c.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
        c.SetDataItemTemplateContent(r =>
        {
            var invoiceId = (long)DataBinder.Eval(r.DataItem, "ID");
            ViewContext.Writer.Write("<a onclick=\"replaceInvoice(" + invoiceId + ")\" " +
                                     "style=\"cursor: pointer;color: blue;\" /*href=\"/Invoice/Edit/" + invoiceId +"\"*/" +
                                     "class=\"on-default edit-row\" style=\"margin-right:5px; color:blue;\">Replace</a>" +
                                     "<a onclick=\"cancelInvoice(" + invoiceId + ")\" style=\"cursor: pointer;color: red;\"" +
                                     "class=\"on-default remove-row\"> Cancel</a>"
                );
        });
    });

    settings.Columns.Add(c =>
    {
        c.Caption = "View Invoice";
        c.EditorProperties().TextBox(p =>
        {
            p.CssPostfix = "actions";
        });
       
        c.CellStyle.HorizontalAlign = HorizontalAlign.Center;
        c.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
        c.SetDataItemTemplateContent(r =>
        {
            var invoiceId = (long)DataBinder.Eval(r.DataItem, "ID");
            ViewContext.Writer.Write("<form action=\"ShowReleaseReport\" method=\"post\">" +
                                     "<input name=\"invoiceId\" type=\"hidden\" name=\"invoiceId\" id=\"invoiceId\" value=\"" + invoiceId+"\">"+
                                     "<button type=\"submit\" data-target=\"#showInvoice\" type=\"button\" style=\"cursor: pointer;\"class=\"btn btn-info\">View</button>" +
                                     "</form>"
                                     +"</div>"
                );
        });
    });
}).Bind(Model).GetHtml())